This file contains notes about changes I had to make to my machine for sshed
or any software requirements, etc.

SOFTWARE REQUIREMENTS:
Part of the goal of sshed is to have the minimum possible requirements on
the host side. Whilst the client side is expected to be the user's personal
desktop or laptop and thus dependencies are of little concern, the host machine
could be anything that either shouldn't have extra software installed (server,
embedded device) or a machine on which the user doesn't have access to install
additional software. The current requirements are as follows:
BOTH HOST AND CLIENT:
* Python 3. It may work with Python 2 with some minor modifications, but until
  someone comes along with a requirement for Python 2, it's not a priority.
* OpenSSH >= 6.7 (or compatible). The specific features required are:
  - UNIX-domain socket forwarding from the host to the client ('RemoteForward'
    in OpenSSH terms). The requirement for OpenSSH >= 6.7 is because it
    introduces socket forwarding: http://lwn.net/Articles/609321/


SSH SESSION:
You need to forward the sshed socket to the remote server. To do that, we
use SendEnv on the local machine and AcceptEnv on the remote machine.

On the remote machine, add SSHED_SOCK to the server's AcceptEnv line.
My remote machine's AcceptEnv is:
AcceptEnv LANG LC_* SSHED_SOCK

If you don't have root access to the remote machine, you can manually copy the
SSHED_SOCK environment varible.

This line should be in /etc/ssh/sshd_config. Don't forget to reload the SSH
server so these changes take effect.

On the local machine, add sshed_SOCK to the client's SendEnv line.
You can do this globally in /etc/ssh/ssh_config or for just one user in
~/.ssh/config
Within that, you can also specify it per host etc.

I changed it to send it only to one host (terra) with the following two lines:

Host terra
  SendEnv LANG LC_* SSHED_SOCK

You also need to forward the actual socket. An example command is:
  ssh -R $SSHED_SOCK:$SSHED_SOCK/socket terra

